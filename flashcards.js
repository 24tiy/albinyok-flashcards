let curLang = "ru";
let theme = "light";
let editMode = false;
let testLocked = false, awaitingTestAnswer = false;
let mainDeck = [];
let deck=[], idx=0, shown=false, deckName='‚Äî', localKey = 'albinyok-flashcards-v1';

const translations = {
  ru: {
    siteTitle:"Albinyok Flashcards",
    siteSub:'–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ CSV ‚Äî —É—á–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ –Ω–∞ –ü–ö.',
    fileOrLink:"–û—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
    fileBtn:"–§–∞–π–ª CSV",
    template:"–®–∞–±–ª–æ–Ω CSV",
    demo:"–î–µ–º–æ-–Ω–∞–±–æ—Ä",
    urlBtn:"–ü–æ —Å—Å—ã–ª–∫–µ",
    reveal:"–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç",
    hide:"–°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç",
    know:"‚úÖ –ó–Ω–∞—é",
    dont:"‚ùå –ù–µ –∑–Ω–∞—é",
    shuffle:"–ü–µ—Ä–µ–º–µ—à–∞—Ç—å",
    reset:"–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å",
    deck:"–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤",
    empty:"–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
    progress:"–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
    clear:"–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë",
    hotkeys:"–¢–æ–ª—å–∫–æ –ó–Ω–∞—é/–ù–µ –∑–Ω–∞—é ‚Üí –î–∞–ª—å—à–µ",
    errorPref:"–û—à–∏–±–∫–∞: ",
    fetchFail:"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
    fileTooBig:"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!",
    csvNotPairs:"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä '–≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç'",
    help:"–ü–æ–º–æ—â—å",
    editor_hint:"–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∏–∂–µ, –∑–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ! –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞.",
    add_card:"–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É",
    save_cards:"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
    del:"–£–¥–∞–ª–∏—Ç—å",
    edit:"–†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫",
    train_hard:"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ",
    save_success:"–ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
    train_all_done:"–í—Å–µ —Å–ª–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã—É—á–µ–Ω—ã! –ú–û–õ–û–î–ï–¶!",
    test: "–¢–µ—Å—Ç",
    test_on: "–¢–µ—Å—Ç –≤–∫–ª—é—á—ë–Ω",
    test_off: "–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç",
    next: "–î–∞–ª—å—à–µ",
    test_enabled: "–†–µ–∂–∏–º —Ç–µ—Å—Ç–∞ –≤–∫–ª—é—á—ë–Ω",
    test_status: "–¢–æ–ª—å–∫–æ '–ó–Ω–∞—é', '–ù–µ –∑–Ω–∞—é' –∏ '–î–∞–ª—å—à–µ' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞.",
    testmode_tip:"–†–µ–∂–∏–º —Ç–µ—Å—Ç–∞: —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ '–ó–Ω–∞—é' –∏ '–ù–µ –∑–Ω–∞—é'. –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è '–î–∞–ª—å—à–µ' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π. –í—ã–π—Ç–∏ ‚Äî –≤—ã–∫–ª—é—á–∏ —á–µ–∫–±–æ–∫—Å.",
    hard_tip:"–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –æ—Ç–º–µ—Ç–∏–ª '–ù–µ –∑–Ω–∞—é'.",
    editor_tip:"–í —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å, –∏–∑–º–µ–Ω—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å."
  },
  en: {
    siteTitle:"Albinyok Flashcards",
    siteSub:'CSV flashcards app ‚Äî remember better everywhere!',
    fileOrLink:"Data source?",
    fileBtn:"CSV File",
    template:"CSV Template",
    demo:"Demo Set",
    urlBtn:"By Link",
    reveal:"Show answer",
    hide:"Hide answer",
    know:"‚úÖ Know",
    dont:"‚ùå Don't know",
    shuffle:"Shuffle",
    reset:"Reset progress",
    deck:"Source",
    empty:"Upload or select a CSV",
    progress:"Export progress",
    clear:"Clear all",
    hotkeys:"Only Know/Don't know ‚Üí Next",
    errorPref:"Error: ",
    fetchFail:"Load error",
    fileTooBig:"File too big!",
    csvNotPairs:"No question/answer pairs found",
    help:"Help",
    editor_hint:"Edit cards below and save! 1 row = 1 card.",
    add_card:"Add card",
    save_cards:"Save changes",
    del:"Delete",
    edit:"Card editor",
    train_hard:"Train hard cards",
    save_success:"Saved!",
    train_all_done:"All hard cards done! NICE!",
    test: "Test",
    test_on: "Test enabled",
    test_off: "Enable test",
    next: "Next",
    test_enabled: "Test mode enabled",
    test_status: "Only 'Know', 'Don't know' and 'Next' for navigation.",
    testmode_tip:"Test mode: only 'Know' and 'Don't know'. After choice, click 'Next' to continue. Turn off by unchecking the box.",
    hard_tip:"Show only cards you've marked as 'Don't know'.",
    editor_tip:"You can add, edit and delete cards below, don‚Äôt forget to save!"
  },
  fr: {
    siteTitle:"Albinyok Flashcards",
    siteSub:"Appli pour r√©viser vos cartes CSV ‚Äî mobile et PC.",
    fileOrLink:"Source des donn√©es¬†?",
    fileBtn:"Fichier CSV",
    template:"Mod√®le CSV",
    demo:"Jeu d√©mo",
    urlBtn:"Par lien",
    reveal:"Afficher r√©ponse",
    hide:"Cacher r√©ponse",
    know:"‚úÖ Je sais",
    dont:"‚ùå Je ne sais pas",
    shuffle:"M√©langer",
    reset:"R√©initialiser",
    deck:"Source",
    empty:"Chargez ou choisissez un CSV",
    progress:"Exporter progr√®s",
    clear:"Tout nettoyer",
    hotkeys:"Seulement Je sais/Je ne sais pas ‚Üí Suivant",
    errorPref:"Erreur¬†: ",
    fetchFail:"Erreur t√©l√©chargement",
    fileTooBig:"Fichier trop volumineux¬†!",
    csvNotPairs:"Aucune question/r√©ponse trouv√©e",
    help:"Aide",
    editor_hint:"√âditez, puis sauvegardez. 1 ligne = 1 carte.",
    add_card:"Ajouter carte",
    save_cards:"Enregistrer",
    del:"Supprimer",
    edit:"√âditeur de cartes",
    train_hard:"Difficile",
    save_success:"Cartes enregistr√©es!",
    train_all_done:"Toutes les difficiles apprises¬†!",
    test: "Test",
    test_on: "Test activ√©",
    test_off: "Activer test",
    next: "Suivant",
    test_enabled: "Mode test activ√©",
    test_status: "Seulement 'Je sais', 'Je ne sais pas' et 'Suivant'.",
    testmode_tip:"Mode test¬†: seulement 'Je sais'/'Je ne sais pas'. Cliquez 'Suivant' ensuite. D√©sactivez ‚Äî d√©cochez la case.",
    hard_tip:"Afficher seulement les difficiles marqu√©es.",
    editor_tip:"Ajoutez/√©ditez/supprimez vos cartes ci-dessous, sauvegardez !"
  }
};

function $(sel){ return document.querySelector(sel);}
function t(k){return (translations[curLang]&&translations[curLang][k])||k;}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤, –∫–Ω–æ–ø–æ–∫, –Ω–∞–¥–ø–∏—Å–µ–π
function updateLang() {
  document.documentElement.lang = curLang;
  $("#siteTitle").textContent = t("siteTitle");
  $(".sub").firstChild.textContent = t("siteSub");
  $("#fileOrLink").textContent = t("fileOrLink");
  $("#fileBtnTxt").textContent = t("fileBtn");
  $("#templateBtn").textContent = t("template");
  $("#demoBtn").textContent = t("demo");
  $("#loadUrlBtn").textContent = t("urlBtn");
  $("#editLabel").textContent = t("edit");
  $("#hardLabel").textContent = t("train_hard");
  updateTestBtnText();
  $("#urlInput").placeholder = t("urlPlaceholder") || '';
  $("#deckName").textContent = `${t('deck')}: ${deckName}`;
  $("#testStatus").innerHTML = testLocked ? `<b>${t("test_enabled")}</b> ‚Äî ${t("test_status")}` : "";
  $("#testStatus").style.display = testLocked ? "" : "none";
  $("#testModeCheck").checked = !!testLocked;
  $("#hotkeysTip").textContent = '';
  updateControlsBar();
}
function updateTestBtnText() {
  $("#testBtnText").textContent = testLocked ? t("test_on") : t("test_off");
}

$("#langSelect").addEventListener("change",function(e){
  curLang=this.value; updateLang(); updateUI();
});
$("#themeToggle").onclick = () => {
  theme = (theme==="light")?"dark":"light";
  document.body.dataset.theme = theme; 
  localStorage.setItem("albinyok-flashcards-theme",theme);
  $("#themeToggle").textContent = theme==="dark" ? "üåû" : "üåô";
};
function initTheme(){
  theme=localStorage.getItem("albinyok-flashcards-theme")||"light";
  document.body.dataset.theme = theme;
  $("#themeToggle").textContent = theme==="dark" ? "üåû" : "üåô";
}
initTheme();

function sniffHeader(a){
  if(!a || a.length<2) return false;
  let ha=(a[0]||'').toLowerCase(), hb=(a[1]||'').toLowerCase();
  return ['q','question','–≤–æ–ø—Ä–æ—Å','frage'].includes(ha) && ['a','answer','–æ—Ç–≤–µ—Ç','r√©ponse','antwort'].includes(hb);
}
function toDeck(rows){
  if(!rows||!rows.length) return [];
  let filtered=[];
  for(let r of rows){
    let q=(r[0]||'').trim(), a=(r[1]||'').trim();
    if(q+a==='') continue;
    filtered.push([q,a]);
  }
  if(!filtered.length) return [];
  let skip=sniffHeader(filtered[0]) ? 1:0, out=[];
  for(let i=skip;i<filtered.length;i++)
    out.push({q:filtered[i][0], a:filtered[i][1], ok:false, bad:false});
  return out;
}
function updateControlsBar() {
  let el=$("#controlsBar");
  if (!el) return;
  el.innerHTML = "";
  if (!testLocked) {
    el.appendChild(createCtrl("ctrl showhide","", shown ? t("hide") : t("reveal"),()=>toggleShowHide()));
  }
  let okBtn = createCtrl("ctrl ok","", t("know"),()=>onKnowClick());
  let badBtn = createCtrl("ctrl bad","", t("dont"),()=>onDontKnowClick());
  if(testLocked && awaitingTestAnswer) { okBtn.disabled=true; badBtn.disabled=true; }
  el.appendChild(okBtn);
  el.appendChild(badBtn);
  if (testLocked) {
    let next = document.createElement("button");
    next.className = "next-btn-main";
    next.textContent = t("next") || "–î–∞–ª—å—à–µ";
    next.onclick = () => { nextTestStep(); };
    next.disabled=!awaitingTestAnswer;
    el.appendChild(next);
  }
}
function createCtrl(className, title, text, handler) {
  let btn=document.createElement("button");
  btn.className=className; btn.type="button"; btn.textContent=text; btn.title=title;
  btn.onclick = handler;
  return btn;
}
function updateUI(){
  let q=$("#q"), a=$("#a"), c=$("#counter"), s=$("#score"), n=$("#deckName"), bar=$("#progressBar");
  if(!deck.length){
    q.textContent = t("empty");
    a.textContent = ""; a.style.display = "none";
    if (c) c.textContent = "0 / 0";
    if (s) s.textContent = "‚úÖ 0 ‚Ä¢ ‚ùå 0";
    if (n) n.textContent = `${t('deck')}: ‚Äî`;
    if (bar) bar.style.width = "0%";
    $("#hotkeysTip").textContent = '';
    return;
  }
  let card=deck[idx];
  q.textContent = card.q || `(${t('deck')})`;
  a.textContent = card.a || `(‚Äî)`;
  if (!shown) { a.style.display = "none"; }
  else { a.style.display = "block"; }
  if (c) c.textContent = `${idx+1} / ${deck.length}`;
  let ok=deck.filter(x=>x.ok).length, bad=deck.filter(x=>x.bad).length;
  if (s) s.textContent = `‚úÖ ${ok} ‚Ä¢ ‚ùå ${bad}`;
  if (n) n.textContent = `${t('deck')}: ${deckName}`;
  updateControlsBar();
  $("#hotkeysTip").textContent = t("hotkeys");
}
function toggleShowHide() {
  shown = !shown;
  updateUI();
  persist();
}
function onKnowClick(){
  if(testLocked && !awaitingTestAnswer){
     deck[idx].ok=true; deck[idx].bad=false; awaitingTestAnswer=true; persist();
     updateControlsBar();
  } else if(!testLocked){
     deck[idx].ok=true; deck[idx].bad=false; idx=(idx+1)%deck.length; shown=false; persist(); updateUI();
  }
}
function onDontKnowClick(){
  if(testLocked && !awaitingTestAnswer){
    deck[idx].bad=true; deck[idx].ok=false; awaitingTestAnswer=true; persist();
    updateControlsBar();
  } else if(!testLocked){
     deck[idx].bad=true; deck[idx].ok=false; idx=(idx+1)%deck.length; shown=false; persist(); updateUI();
  }
}
function nextTestStep(){
  shown = false; awaitingTestAnswer=false;
  idx = (idx+1)%deck.length;
  updateUI();
  persist();
}
// –ö–ª–∏–∫ –ø–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∏–∫–æ–Ω–∫–∞–º "?"
function bindModalTip(btnId, textKey){
  let btn=$(btnId);
  if(!btn)return;
  function show(ev){
    let mt = $("#modalTip");
    mt.textContent = t(textKey);
    mt.style.display = "block";
    const rect = btn.getBoundingClientRect();
    mt.style.left = (rect.left + window.scrollX + 16) + "px";
    mt.style.top = (rect.top + window.scrollY + 30) + "px";
  }
  function hide(){ $("#modalTip").style.display="none"; }
  btn.onmouseenter = show;
  btn.onclick = show;
  btn.onmouseleave = hide;
}
bindModalTip("#testHelp","testmode_tip");
bindModalTip("#hardHelp","hard_tip");
bindModalTip("#editHelp","editor_tip");

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–¢–µ—Å—Ç" ‚Äî —Å—Ä–∞–∑—É —á–µ–∫–±–æ–∫—Å+–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ+–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è!
$("#testBtnWrap").onclick = function(e){
  if(e.target.classList.contains('qhelp-btn')) return; // –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º, –µ—Å–ª–∏ –∫–ª–∏–∫ –Ω–∞ ?
  testLocked = !testLocked;
  awaitingTestAnswer = false;
  updateTestBtnText();
  updateLang(); updateUI();
  $("#testModeCheck").checked = testLocked;
};
// —á–µ–∫–±–æ–∫—Å –≤–Ω—É—Ç—Ä–∏ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
$("#testModeCheck").onclick = function(e){
  testLocked = this.checked;
  awaitingTestAnswer = false;
  updateTestBtnText();
  updateLang(); updateUI();
};

$("#file").addEventListener("change",function(e){
  let f=(e.target&&e.target.files&&e.target.files[0])?e.target.files[0]:null; if(!f) return;
  let r=new FileReader();
  r.onload=()=>{ loadCSVText(String(r.result), f.name.replace(/\.[^.]+$/,"")); };
  r.onerror=()=>{ alert(t("errorPref")+" Read file error"); };
  r.readAsText(f);
});
$("#reupload").addEventListener("change",function(e){
  let f=(e.target&&e.target.files&&e.target.files[0])?e.target.files[0]:null; if(!f) return;
  let r=new FileReader();
  r.onload=()=>{ loadCSVText(String(r.result), f.name.replace(/\.[^.]+$/,"")); };
  r.onerror=()=>{ alert(t("errorPref")+" Read file error"); };
  r.readAsText(f);
});
$("#loadUrlBtn").onclick=function(){
  let err = $("#error"), man = $("#downloadManual");
  err.classList.remove("show"); man.classList.remove("show"); err.textContent = man.textContent = "";
  let inp=$("#urlInput"), url=(inp&&inp.value)?inp.value.trim():"";
  if (!url) { err.textContent="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É!"; err.classList.add("show"); return; }
  // GitHub: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ raw
  if (/github\.com\/.+\/.+\/blob\//i.test(url))
    url = url.replace('github.com/', 'raw.githubusercontent.com/').replace('/blob/', '/');
  // Google Sheets - auto to CSV
  if(url.includes("docs.google.com/spreadsheets/") && !/export\?format=csv/.test(url))
    url = url.replace(/\/edit.*$/, '') + '/export?format=csv';
  fetch(url,{cache:"no-store"})
    .then(res=>{
      if(!res.ok) throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: ${res.status} ${res.statusText}`);
      if(+res.headers.get("content-length")>9000000) throw new Error("–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª");
      return res.text();
    })
    .then(txt=>{
      if(txt.trim().length<50 || /<(html|body)[ >]/i.test(txt)) throw new Error("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É/CSV: –≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –∑–∞—â–∏—â—ë–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—É–±–ª–∏—á–Ω–æ.");
      let name = decodeURIComponent(url.split("/").pop()||"Remote Table");
      loadCSVText(txt, name);
    })
    .catch(e=>{
      man.textContent = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ–Ω–∞ –ø—É–±–ª–∏—á–Ω–∞ –∏ —ç—Ç–æ CSV/—Ç–∞–±–ª–∏—Ü–∞. –ò–ª–∏ —Å–∫–∞—á–∞–π —Ñ–∞–π–ª –∫ —Å–µ–±–µ, –∞ –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏ —á–µ—Ä–µ–∑ '–§–∞–π–ª'. –û—à–∏–±–∫–∞: " + (e.message||e);
      man.classList.add("show");
    });
};

function persist(){ localStorage.setItem(localKey,JSON.stringify({deck,idx,shown,deckName,lang:curLang,theme:theme,editMode})); }
function restore(){ try{ let raw=localStorage.getItem(localKey); if(!raw) return false; let p=JSON.parse(raw);
if(p && p.deck && p.deck.length){ deck=p.deck; idx=Math.min(Math.max(0,p.idx|0),deck.length-1); shown=!!p.shown; deckName=p.deckName||'‚Äî';
if(p.lang) { curLang=p.lang; $("#langSelect").value=curLang; }
if(p.theme){ theme=p.theme; document.body.dataset.theme=theme; $("#themeToggle").textContent=(theme==="dark"?"üåû":"üåô");}
if(p.editMode!==undefined) editMode=!!p.editMode; updateLang(); showWorkspace(); updateUI(); return true;}}catch(e){} return false;}
function showWorkspace(){ $("#uploader").classList.add("hidden"); $("#workspace").style.display="block"; }
function showUploader(){ $("#uploader").classList.remove("hidden"); $("#workspace").style.display="none"; }
$("#templateBtn").onclick = () => {
  let csv='question,answer\n"–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?","–ü–∞—Ä–∏–∂"\n"2+2?","4"\n"–ì–ª–∞–≤–Ω—ã–π —Ü–≤–µ—Ç –Ω–µ–±–∞ –¥–Ω—ë–º","–°–∏–Ω–∏–π"\n';
  let blob=new Blob([csv],{type:"text/csv;charset=utf-8;"}),url=URL.createObjectURL(blob),a=document.createElement("a");
  a.href=url; a.download="flashcards_template.csv"; a.click(); setTimeout(()=>URL.revokeObjectURL(url),1000);
};
$("#demoBtn").onclick = () => {
  let demo='question,answer\n"–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?","–ü–∞—Ä–∏–∂"\n"What is the capital of France?","Paris"\n"Quelle est la capitale de la France?","Paris"\n"2+2?","4"\n"–Ø–∑—ã–∫ Python ‚Äî —ç—Ç–æ...","–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"\n"Python is a...","Programming language"\n"Python est un...","Langage de programmation"';
  loadCSVText(demo,"Demo");
};
function loadCSVText(text,name){
  try{
    let parsed = Papa.parse(text.trim(), {skipEmptyLines:true});
    if(parsed.errors && parsed.errors.length) throw new Error(t("csvNotPairs"));
    let d=toDeck(parsed.data);
    if(!d.length) throw new Error(t("csvNotPairs"));
    mainDeck = JSON.parse(JSON.stringify(d));
    deck = d; idx=0; shown=false; deckName=name||'';
    persist(); showWorkspace(); testLocked=false; awaitingTestAnswer=false; updateUI();
    $("#editorBar").style.display = "none";
  }catch(e){
    let err=$("#error");
    if(err){ err.textContent=t("errorPref") + (e.message||e); err.classList.add("show"); }
    showUploader();
  }
}
$("#shuffleBtn").onclick = () => {deck=shuffle(deck);idx=0;shown=false;updateUI();persist();};
$("#resetBtn").onclick = () => {
  for(let i=0;i<deck.length;i++){deck[i].ok=false;deck[i].bad=false;}
  idx=0;shown=false;updateUI();persist();
};
$("#exportBtn").onclick = ()=>{
  let out=deck.map((x,i)=>({i,q:x.q,a:x.a,ok:x.ok,bad:x.bad}));
  let blob=new Blob([JSON.stringify(out,null,2)],{type:"application/json"});
  let url=URL.createObjectURL(blob),a=document.createElement("a");
  a.href=url; a.download="deck-progress.json";
  a.click(); setTimeout(()=>URL.revokeObjectURL(url),1000);
};
$("#clearBtn").onclick = () => {
  if(confirm("–£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?")){ 
    localStorage.removeItem(localKey);
    location.reload();
  }
};
$("#toggleEditBtn").onclick = function() {
  editMode = !editMode;
  persist();
  if(editMode) launchEditor();
  else { $("#editorBar").style.display="none"; }
};
function launchEditor() {
  let bar = $("#editorBar");
  bar.innerHTML = `<div style="font-size:13px;margin-bottom:10px">${t("editor_hint")}</div>`;
  let tbl = document.createElement("table");
  tbl.style.width="100%"; tbl.style.marginBottom="8px";
  let body = document.createElement("tbody");
  tbl.appendChild(body);
  deck.forEach((c,i)=>{
    let row = document.createElement("tr");
    let q = document.createElement("td");
    let a = document.createElement("td");
    let edit = document.createElement("td");
    q.innerHTML = `<input type="text" value="${c.q.replace(/"/g,'&quot;')}" style="width:96%"/>`;
    a.innerHTML = `<input type="text" value="${c.a.replace(/"/g,'&quot;')}" style="width:96%"/>`;
    let delB = document.createElement("button");
    delB.className="btn-glass-violet small edit-btn"; delB.textContent=t("del");
    delB.onclick=()=>{ deck.splice(i,1); launchEditor(); };
    edit.appendChild(delB);
    row.appendChild(q); row.appendChild(a); row.appendChild(edit);
    body.appendChild(row);
  });
  bar.appendChild(tbl);
  let addBtn = document.createElement("button");
  addBtn.className="btn-glass-violet small edit-btn"; addBtn.textContent=t("add_card");
  addBtn.onclick=()=>{
    deck.push({q:"",a:"",ok:false,bad:false});
    launchEditor();
  };
  let saveBtn=document.createElement("button");
  saveBtn.className="btn-glass-violet small edit-btn"; saveBtn.textContent=t("save_cards");
  saveBtn.onclick=()=>{
    let rows=tbl.querySelectorAll("tr");
    let newDeck=[];
    rows.forEach(row=>{
      let q=row.children[0].firstChild.value.trim(),a=row.children[1].firstChild.value.trim();
      if(q+a!=="") newDeck.push({q:q,a:a,ok:false,bad:false});
    });
    deck = newDeck; idx=0; shown=false;
    persist(); showWorkspace(); updateUI();
    bar.innerHTML=`<div style="color:var(--ok);margin:8px 0;">${t("save_success")}</div>`;
    setTimeout(()=>bar.style.display="none",1200);
  }
  bar.appendChild(addBtn); bar.appendChild(saveBtn);
  bar.style.display="block";
}
$("#trainHardBtn").onclick = ()=>{
  let hard = deck.filter(x=>x.bad);
  if(!hard.length) { alert(t("train_all_done")); return; }
  deck = hard.map(x=>({...x}));
  idx=0; shown=false; testLocked=false; awaitingTestAnswer=false;
  deckName=t("train_hard");
  persist(); showWorkspace(); updateUI();
};
function bootstrap(){
  updateLang();
  if(restore()) return;
  $("#testModeCheck").checked = testLocked;
}
document.addEventListener("DOMContentLoaded",bootstrap);
function shuffle(a){ for(let i=a.length-1;i>0;i--){ let j=Math.floor(Math.random()*(i+1)); [a[i],a[j]]=[a[j],a[i]]; } return a; }
